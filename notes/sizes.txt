16 bit system with 19-bit physical address bus

pages have to be at least 8 words (3 bit address), so a 13 bit logical page address becomes a 16 bit physical page address

need at least one bit for valid flag
should have at least one bit for read/write
should have at least one reserved bit for later

so a 10 bit logical page address becomes a 13 bit physical page address + 3 status flags, and the remaining 6 bits of offset bits from the logical address provide the rest of the 19 physical address bits

6 bits of page offset bits is a 64 word page (128 bytes)

13 bits of physical page address is 8192 pages

Each task needs a page for itself, a page table page, a stack page, and a data page, so max 1/4 number of tasks as pages
this gives us a 11 bit task ID, still too big for 2 in 1 word




Assume two task IDs and two status bits in 1 word
16 bit word
7 bit task ID
max 128 tasks
and max 8192 pages from above

8192 pages over 128 tasks is 64 pages per task, or an almost full level 1 table

level 1 page table is 64*64 = 4096 words (12 bit address)
level 2 is 64*64*64 = 262144 words (18 bit address)	close enough!
- and it uses 65 pages or 4160 words to give us all that (~1.5% loss)

good enough to move on with for now!


on a 32 or 64 bit system, the word size grows much more than the physical memory, so it becomes much easier to pack the two task IDs into the same word, so we aren't limiting ourselves by doing that with 16 bits

e.g. 32 bits is two 15 bit task IDs, and 64 bits is two 31 bit task IDs


the problem is that the inc/xputer model requires very many small tasks, so that arbitrarily high task counts coupled with small task memories are more typical than the traditional fewer threads with larger shared data spaces
